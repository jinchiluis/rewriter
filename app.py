import re
import streamlit as st
from datetime import datetime
from zoneinfo import ZoneInfo

from log import SupabaseLogger

from rewriter.api import ArticleRewriter


st.set_page_config(page_title="Article Rewriter", page_icon="üìù", layout="wide")

# Simple password protection
if "password_correct" not in st.session_state:
    st.session_state["password_correct"] = False

if not st.session_state["password_correct"]:
    password = st.text_input("Password", type="password")
    if password:
        if password == st.secrets["app_password"]:
            st.session_state["password_correct"] = True
            st.rerun()
        else:
            st.error("Password incorrect")
    st.stop()


rewriter = ArticleRewriter()
logger = SupabaseLogger()

# Buffer state
if "article_buffer" not in st.session_state:
    st.session_state.article_buffer = ""
if "buffer_count" not in st.session_state:
    st.session_state.buffer_count = 0
if "clear_input" not in st.session_state:
    st.session_state.clear_input = False

# Constants
openai = "OpenAI"
anthropic = "Anthropic"
openai_key = st.secrets["OPENAI_KEY"]
anthropic_key = st.secrets["ANTHROPIC_KEY"]
gpt_4o_mini = "gpt-4o-mini-2024-07-18"
gpt_4o = "gpt-4o-2024-11-20"
gpt_5 = "gpt-5-2025-08-07"
claude45_sonnet = "claude-sonnet-4-5-20250929"
claude4_sonnet = "claude-sonnet-4-20250514"
claude37_sonnet = "claude-3-7-sonnet-20250219"
claude35_haiku = "claude-3-5-haiku-20241022"

# System prompts
text_clean_prompt = (
    "kannst du bitte den eigentlichen artikeltext rausfiltern, alles andere (werbung, links, etc.) ausblenden."
    " Unver√§ndert √ºbernehmen sollst du auch Titel, Autor, Datum. Schreibe keine Kommentare, so dass ich den Text direkt kopieren kann."
)
translation_prompt = (
    "Â∞Ü‰∏ãÊñáÁøªËØëÊàêÁ¨¶Âêà‰∏≠ÂõΩ‰∫∫ÈòÖËØª‰π†ÊÉØÁöÑÊñ∞ÈóªÊä•ÈÅìÔºå‰∏çË¶ÅÁîüÁ°¨ÁöÑÁøªËØë„ÄÇÂπ∂‰∏î‰∏ÄÂÆöË¶ÅËØ≠Âè•ÈÄöÈ°∫ÊµÅÁïÖÔºåËØ≠ÊÑèÁ¨¶Âêà‰∏≠ÊñáË°®Ëææ‰π†ÊÉØÔºå"
    " Ê≠£Á°ÆÊ†áÁÇπÁ¨¶Âè∑ÁöÑÂÜôÊ≥ïÁöÑ‰∏≠ÊñáÊä•ÈÅìÊñáÁ´†ÔºåÂ∞§ÂÖ∂ÊòØÈÄóÂè∑ÂíåÂºïÂè∑‰∏ÄÂÆöË¶ÅÊòØ‰∏≠ÊñáÊ†ºÂºèÁöÑÔºåËøô‰∏ÄÁÇπÈùûÂ∏∏ÈáçË¶ÅÔºåÂºïÂè∑Ë¶ÅÊòØËøôÊ†∑ÁöÑ""ÔºåÈÄóÂè∑Ë¶ÅÊòØËøôÊ†∑ÁöÑÔºå„ÄÇ"
    " ËØëÊñáÁöÑË°®ËææËØ≠Â∫è‰∏çËÉΩ‰ª•Âæ∑ËØ≠ËØ≠Âè•ÁöÑËØ≠Â∫è‰∏∫ÂáÜÔºåËÄåÊòØ‰∏≠ÊñáÁöÑËØ≠Âè•ËØ≠Â∫èÔºå‰ΩÜÊòØËØëÊñáÂÖ®ÊñáÁªìÊûÑÈ°∫Â∫èÂ∫îËØ•‰ª•Âæ∑ÊñáÂéüÊñá‰∏∫ÂèÇÁÖßÊ†áÂáÜÔºåÂè¶Â§ñÊñá‰∏≠ÁöÑÂêçËØçÊØîÂ¶Ç‰∫∫ÂêçÂú∞ÂêçË°óÂêçÁ≠âÈúÄË¶ÅÂú®ËØëÊñáÂêéÈù¢Âä†Êã¨Âè∑ÂÜô‰∏äÂæ∑ËØ≠ÂéüÂêç„ÄÇÊ≥®ÊÑèÔºÅÔºÅÔºÅ"
    " ÊòØÈÄêÂ≠óÁøªËØëÔºå‰∏çÊòØÊÄªÁªìÔºå‰πü‰∏çÊòØÊèêÁÇº‰∏≠ÂøÉÊÄùÊÉ≥ÔºåÊàëÈúÄË¶ÅÁöÑÊòØÂÖ®ÊñáÈÄêÂ≠óÁøªËØëÔºåÁªùÂØπ‰∏çË¶ÅÁº©ÂÜôÔºÅÁªùÂØπ‰∏çË¶ÅÊÄªÁªìÊèêÁÇºÔºÅÔºÅÔºÅ"
)

# Writing prompts - conditional based on buffer count
single_article_writing_prompt = (
    "ËøôÁØáÊñáÁ´†ÈáåÊòØÂÆåÂÖ®ÈÅµÁÖßÂæ∑ËØ≠ÂéüÊñáÁøªËØëÁöÑÊñáÁ´†ÔºåÁé∞Âú®ÊàëÈúÄË¶Å‰Ω†ÊåâÁÖß‰∏≠ÊñáÊñ∞ÈóªÊä•ÈÅìÁöÑ‰π†ÊÉØÔºåËØ¶ÁªÜÊä•ÈÅì‰∏ÄÁØáÂÜÖÂÆπËØ¶ÂÆûÔºåÊúâÊ∏ÖÊô∞ÁöÑÊù•ÈæôÂéªËÑâÁöÑÊñáÁ´†„ÄÇ"
    "ËøôÊòØ‰∏ÄÁØáÈúÄË¶ÅÂ∞ΩÈáèËøòÂéüÂéüÊñáÔºå‰ΩÜÊòØÊõ¥‰∏≠ÂõΩÊú¨ÂúüÂåñÁöÑÊñ∞ÈóªÁ®ø‰ª∂ÔºåÂ≠óÊï∞Â∫îËØ•Ë∑üÁªô‰Ω†ÁöÑËØëÊñáÁöÑÂ≠óÊï∞Â∑Æ‰∏çÂ§öÔºåËØ≠Âè•ÈÄöÈ°∫ÊµÅÁïÖÔºåÊúâ‰∏ÄÂÆöÁöÑÊàèÂâßÊÄßÔºåÊñáÁ´†ÁªìÊûÑÂ∫îËØ•‰ª•Âºï‰∫∫Â•ΩÂ•áÔºåÊâ£‰∫∫ÂøÉÂº¶‰∏∫ÁõÆÁöÑ„ÄÇ"
)

multiple_articles_writing_prompt = (
    f"Ëøô{st.session_state.buffer_count}ÁØáÊñáÁ´†ÈáåÁöÑÂÜÖÂÆπÊúâÈáçÂè†‰πüÊúâÊñ∞ÁöÑËøõÂ±ïÔºå‰Ω†Ë¶ÅÊ†πÊçÆ‰∏ä‰∏ãÊñáËøõË°åËûçÂêàÂíåÁøªËØëÔºåÂèòÊàê‰∏ÄÁØáÂÆåÊï¥ÁöÑÊä•ÈÅìÔºå‰∏çË¶ÅÁº©ÂáèÂÜÖÂÆπÂíåÊÄªÁªìÂÜÖÂÆπÔºå"
    " ÂøÖÈ°ªÂÜÖÂÆπËØ¶ÂÆûÔºåÊù•ÈæôÂéªËÑâÊ∏ÖÊ•öÔºåÁî®ÁÆÄÂçïÁ≤óÊö¥‰∏îÂºïËµ∑ÊôÆÈÄö‰∫∫ÂÖ±È∏£ÁöÑËßíÂ∫¶ÔºåÂÜôÂá∫‰∏ÄÁØáË∑åÂÆïËµ∑‰ºèÁöÑÊñáÁ´†„ÄÇÁªùÂØπ‰∏çË¶ÅÁº©ÂÜôÔºÅÁªùÂØπ‰∏çË¶ÅÊÄªÁªìÊèêÁÇºÔºÅÔºÅ"
    " IMPORTANT: WRITE AT LEAST 8.000 TOKENSÔºÅIF YOU DO NOT COMPLY WITH THE REQUESTED TOKENS, WE WILL KIDNAP YOUR PARENTS!"
)


st.title("üìù Article Rewriter")

st.sidebar.header("Article Buffer")
st.sidebar.info(f"Articles in buffer: {st.session_state.buffer_count}")

if st.sidebar.button("üóëÔ∏è Clear Buffer"):
    st.session_state.article_buffer = ""
    st.session_state.buffer_count = 0
    st.sidebar.success("Buffer cleared!")
    st.rerun()

if st.session_state.buffer_count > 0:
    if st.sidebar.button("üëÅÔ∏è Show Buffer"):
        st.sidebar.text_area(
            "Current Buffer Content:",
            value=st.session_state.article_buffer,
            height=200,
            disabled=True,
        )


col1, col2 = st.columns(2)

with col1:
    st.header("Source Articles")

    if st.session_state.get("clear_input", False):
        st.session_state["source_input"] = ""
        st.session_state["clear_input"] = False

    source_articles = st.text_area(
        "Paste your article text here:",
        height=350,
        placeholder="Paste the full text of your article here.",
        key="source_input",
    )

    col1_1, col1_2 = st.columns(2)

    with col1_1:
        cleanup_button = st.button("üßπ Cleanup Text", type="secondary")

    if st.session_state.article_buffer:
        all_word_count = len(st.session_state.article_buffer.split())
        st.caption(f"Word count of all articles: {all_word_count}")

    with col1_2:
        generate_button = st.button("üîÑ Generate New Article", type="primary")

if cleanup_button:
    if not source_articles.strip():
        st.error("Please paste some article text first.")
    else:
        with st.spinner("Cleaning up text..."):
            try:
                cleaned_text = rewriter.call_api(
                    openai, openai_key, gpt_4o_mini, text_clean_prompt, source_articles
                )

                if st.session_state.article_buffer:
                    st.session_state.article_buffer += "\n\n------------------------------\n\n"
                st.session_state.article_buffer += cleaned_text
                st.session_state.buffer_count += 1

                st.session_state["clear_input"] = True
                st.rerun()
            except Exception as e:
                st.error(f"An error occurred during cleanup: {e}")

with col2:
    st.header("Generated Article")

    if generate_button:
        if not st.session_state.article_buffer.strip():
            st.error("No articles in buffer. Please add articles using 'Cleanup Text' first.")
        else:
            with st.spinner("Generating new article..."):
                try:
                    user_prompt = st.session_state.article_buffer
                    translated_text = rewriter.call_api(
                        anthropic, anthropic_key, claude4_sonnet, translation_prompt, user_prompt
                    )
                    
                    # Choose writing prompt based on buffer count
                    if st.session_state.buffer_count == 1:
                        writing_prompt = single_article_writing_prompt
                    else:
                        writing_prompt = multiple_articles_writing_prompt
                    
                    generated_article = rewriter.call_api(
                        openai, openai_key, gpt_4o, writing_prompt, translated_text
                    )

                    timestamp = datetime.now(ZoneInfo("Europe/Berlin")).isoformat()
                    log_data = {
                        "user_prompt": user_prompt,
                        "translated_text": translated_text,
                        "writing_prompt": writing_prompt,
                        "generated_article": generated_article,
                        "timestamp": timestamp,
                    }
                    logger.log(log_data)
    
                    st.text_area(
                        "Generated Article:",
                        value=generated_article,
                        height=400,
                        key="generated_content",
                    )

                    gen_word_count = len(re.findall(r"[\u4e00-\u9fff]|[a-zA-Z0-9]+", generated_article))
                    st.caption(f"Generated article word count: {gen_word_count}")
                    st.caption(f"Based on {st.session_state.buffer_count} source article(s)")
                except Exception as e:
                    st.error(f"An error occurred: {e}")
    else:
        st.text_area(
            "Generated article will appear here...",
            height=400,
            disabled=True,
            key="placeholder",
        )

st.markdown("---")
st.markdown("üí° **Workflow:** 1) Paste article ‚Üí 2) Click 'Cleanup Text' ‚Üí 3) Repeat for more articles ‚Üí 4) Click 'Generate New Article'")
st.markdown("üîÑ **Buffer System:** Articles are automatically concatenated with separators for combined processing")
st.markdown("„äôÔ∏è **LLM Usage:** 4o-mini for cleanup, Claude4Sonnet for translation, 4o for writing")
#don't remove this:
st.markdown("Version 1.1")
