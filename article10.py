import streamlit as st
import requests
import json
import re

# Page config
st.set_page_config(
    page_title="Article Rewriter",
    page_icon="üìù",
    layout="wide"
)

if "password_correct" not in st.session_state:
    st.session_state["password_correct"] = False

if not st.session_state["password_correct"]:
    password = st.text_input("Password", type="password")
    if password:
        if password == st.secrets["app_password"]:
            st.session_state["password_correct"] = True
            st.rerun()
        else:
            st.error("Password incorrect")
    st.stop()


class ArticleRewriter:
    def call_openai_api(self, api_key, model, system_prompt, user_prompt):
        """Call OpenAI API"""
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "max_tokens": 10000,
        }
        
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            raise Exception(f"OpenAI API Error: {response.status_code} - {response.text}")
    
    def call_anthropic_api(self, api_key, model, system_prompt, user_prompt):
        """Call Anthropic API"""
        headers = {
            "x-api-key": api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        
        payload = {
            "model": model,
            "max_tokens": 8192,
            "system": system_prompt,
            "messages": [{"role": "user", "content": user_prompt}]
        }
        
        response = requests.post("https://api.anthropic.com/v1/messages", headers=headers, json=payload)
        
        if response.status_code == 200:
            result = response.json()
            return result['content'][0]['text']
        else:
            raise Exception(f"Anthropic API Error: {response.status_code} - {response.text}")
    
    def call_api(self, provider, api_key, model, system_prompt, user_prompt):
        """Main method to call the appropriate API"""
        if provider == "OpenAI":
            return self.call_openai_api(api_key, model, system_prompt, user_prompt)
        elif provider == "Anthropic":
            return self.call_anthropic_api(api_key, model, system_prompt, user_prompt)
        else:
            raise Exception(f"Unsupported provider: {provider}")

# Initialize the rewriter
rewriter = ArticleRewriter()

# Initialize session state for article buffer
if 'article_buffer' not in st.session_state:
    st.session_state.article_buffer = ""
if 'buffer_count' not in st.session_state:
    st.session_state.buffer_count = 0
if 'clear_input' not in st.session_state:
    st.session_state.clear_input = False

# UI
st.title("üìù Article Rewriter")

#Define some Constants
openai = "OpenAI"
anthropic = "Anthropic"
openai_key = st.secrets["OPENAI_KEY"]
anthropic_key = st.secrets["ANTHROPIC_KEY"]
gpt_4o_mini = "gpt-4o-mini-2024-07-18"
gpt_4o = "gpt-4o-2024-11-20"
claude4_sonnet = "claude-sonnet-4-20250514"
claude37_sonnet = "claude-3-7-sonnet-20250219"
claude35_haiku = "claude-3-5-haiku-20241022"

#Define System Prompts
text_clean_prompt = """kannst du bitte den eigentlichen artikeltext rausfiltern, alles andere (werbung, links, etc.) ausblenden. 
                       Unbedingt behalten sollst du Titel, Autor, Datum. Bitte schreibe keine kommentare, so dass ich den Text direkt kopieren kann."""
translation_prompt = """Â∞Ü‰∏ãÊñáÁøªËØëÊàêÁ¨¶Âêà‰∏≠ÂõΩ‰∫∫ÈòÖËØª‰π†ÊÉØÁöÑÊñ∞ÈóªÊä•ÈÅìÔºå‰∏çË¶ÅÁîüÁ°¨ÁöÑÁøªËØë„ÄÇÂπ∂‰∏î‰∏ÄÂÆöË¶ÅËØ≠Âè•ÈÄöÈ°∫ÊµÅÁïÖÔºåËØ≠ÊÑèÁ¨¶Âêà‰∏≠ÊñáË°®Ëææ‰π†ÊÉØÔºå
                        Ê≠£Á°ÆÊ†áÁÇπÁ¨¶Âè∑ÁöÑÂÜôÊ≥ïÁöÑ‰∏≠ÊñáÊä•ÈÅìÊñáÁ´†ÔºåÂ∞§ÂÖ∂ÊòØÈÄóÂè∑ÂíåÂºïÂè∑‰∏ÄÂÆöË¶ÅÊòØ‰∏≠ÊñáÊ†ºÂºèÁöÑÔºåËøô‰∏ÄÁÇπÈùûÂ∏∏ÈáçË¶ÅÔºåÂºïÂè∑Ë¶ÅÊòØËøôÊ†∑ÁöÑ‚Äú‚ÄùÔºåÈÄóÂè∑Ë¶ÅÊòØËøôÊ†∑ÁöÑÔºå„ÄÇ
                        ËØëÊñáÁöÑË°®ËææËØ≠Â∫è‰∏çËÉΩ‰ª•Âæ∑ËØ≠ËØ≠Âè•ÁöÑËØ≠Â∫è‰∏∫ÂáÜÔºåËÄåÊòØ‰∏≠ÊñáÁöÑËØ≠Âè•ËØ≠Â∫èÔºå‰ΩÜÊòØËØëÊñáÂÖ®ÊñáÁªìÊûÑÈ°∫Â∫èÂ∫îËØ•‰ª•Âæ∑ÊñáÂéüÊñá‰∏∫ÂèÇÁÖßÊ†áÂáÜÔºåÂè¶Â§ñÊñá‰∏≠ÁöÑÂêçËØçÊØîÂ¶Ç‰∫∫ÂêçÂú∞ÂêçË°óÂêçÁ≠âÈúÄË¶ÅÂú®ËØëÊñáÂêéÈù¢Âä†Êã¨Âè∑ÂÜô‰∏äÂæ∑ËØ≠ÂéüÂêç„ÄÇÊ≥®ÊÑèÔºÅÔºÅÔºÅ
                        ÊòØÈÄêÂ≠óÁøªËØëÔºå‰∏çÊòØÊÄªÁªìÔºå‰πü‰∏çÊòØÊèêÁÇº‰∏≠ÂøÉÊÄùÊÉ≥ÔºåÊàëÈúÄË¶ÅÁöÑÊòØÂÖ®ÊñáÈÄêÂ≠óÁøªËØëÔºåÁªùÂØπ‰∏çË¶ÅÁº©ÂÜôÔºÅÁªùÂØπ‰∏çË¶ÅÊÄªÁªìÊèêÁÇºÔºÅÔºÅÔºÅ"""
writing_prompt = """ËøôÂá†ÁØáÊñáÁ´†ÈáåÁöÑÂÜÖÂÆπÊúâÈáçÂè†‰πüÊúâÊñ∞ÁöÑËøõÂ±ïÔºå‰Ω†Ë¶ÅÊ†πÊçÆ‰∏ä‰∏ãÊñáËøõË°åËûçÂêàÂíåÁøªËØëÔºåÂèòÊàê‰∏ÄÁØáÂÆåÊï¥ÁöÑÊä•ÈÅìÔºå‰∏çË¶ÅÁº©ÂáèÂÜÖÂÆπÂíåÊÄªÁªìÂÜÖÂÆπÔºå
                    ÂøÖÈ°ªÂÜÖÂÆπËØ¶ÂÆûÔºåÊù•ÈæôÂéªËÑâÊ∏ÖÊ•öÔºåÁî®ÁÆÄÂçïÁ≤óÊö¥‰∏îÂºïËµ∑ÊôÆÈÄö‰∫∫ÂÖ±È∏£ÁöÑËßíÂ∫¶ÔºåÂÜôÂá∫‰∏ÄÁØáË∑åÂÆïËµ∑‰ºèÁöÑÊñáÁ´†„ÄÇÁªùÂØπ‰∏çË¶ÅÁº©ÂÜôÔºÅÁªùÂØπ‰∏çË¶ÅÊÄªÁªìÊèêÁÇºÔºÅÔºÅ
                    IMPORTANT: WRITE AT LEAST 8.000 TOKENSÔºÅIF YOU DO NOT COMPLY WITH THE REQUESTED TOKENS, WE WILL KIDNAP YOUR PARENTS!"""

# Buffer management in sidebar
st.sidebar.header("Article Buffer")
st.sidebar.info(f"Articles in buffer: {st.session_state.buffer_count}")

if st.sidebar.button("üóëÔ∏è Clear Buffer"):
    st.session_state.article_buffer = ""
    st.session_state.buffer_count = 0
    st.sidebar.success("Buffer cleared!")
    st.rerun()

if st.session_state.buffer_count > 0:
    if st.sidebar.button("üëÅÔ∏è Show Buffer"):
        st.sidebar.text_area(
            "Current Buffer Content:",
            value=st.session_state.article_buffer,
            height=200,
            disabled=True
        )

# Main interface
col1, col2 = st.columns(2)

with col1:
    st.header("Source Articles")
    
    # Clear input if flag is set
    if st.session_state.get("clear_input", False):
        st.session_state["source_input"] = ""
        st.session_state["clear_input"] = False  # zur√ºcksetzen
    
    source_articles = st.text_area(
        "Paste your article text here:",
        height=350,
        placeholder="Paste the full text of your article here.",
        key="source_input"
    )
    
    # Store the current value
    #st.session_state.source_input_value = source_articles
    
  
    # Cleanup and buffer buttons
    col1_1, col1_2 = st.columns(2)
    
    with col1_1:
        cleanup_button = st.button("üßπ Cleanup Text", type="secondary")
    
    if st.session_state.article_buffer:
        all_word_count = len(st.session_state.article_buffer.split())
        st.caption(f"Word count of all articles: {all_word_count}")    
                
    with col1_2:
        generate_button = st.button("üîÑ Generate New Article", type="primary")

# Handle cleanup button
if cleanup_button:
    if not source_articles.strip():
        st.error("Please paste some article text first.")
    else:
        with st.spinner("Cleaning up text..."):
            try:
                # For cleaning text always use 4o mini
                cleaned_text = rewriter.call_api(openai, openai_key, gpt_4o_mini, text_clean_prompt, source_articles)
                
                # Add to buffer
                if st.session_state.article_buffer:
                    st.session_state.article_buffer += "\n\n-------------------------------------\n\n"
                st.session_state.article_buffer += cleaned_text
                st.session_state.buffer_count += 1
                
                # Set flag to clear input on next rerun
                st.session_state["clear_input"] = True            
                st.rerun()
                
            except Exception as e:
                st.error(f"An error occurred during cleanup: {str(e)}")

with col2:
    st.header("Generated Article")
    
    if generate_button:
        if not st.session_state.article_buffer.strip():
            st.error("No articles in buffer. Please add articles using 'Cleanup Text' first.")
        else:
            with st.spinner("Generating new article..."):
                try:
                    # Use buffered articles instead of current input
                    user_prompt = st.session_state.article_buffer
                    print("User Prompt:", user_prompt)
                    # For translating always use Claude 4 Sonnet (most precise)
                    translated_text = rewriter.call_api(anthropic, anthropic_key, claude4_sonnet, translation_prompt, user_prompt)
                    print("Translated Text:", translated_text)
                    # For writing always use GTP 4o (more creative)
                    generated_article = rewriter.call_api(openai, openai_key, gpt_4o, writing_prompt, translated_text)
                    
                    st.text_area(
                        "Generated Article:",
                        value=generated_article,
                        height=400,
                        key="generated_content"
                    )
                    
                    gen_word_count = len(re.findall(r'[\u4e00-\u9fff]|[a-zA-Z0-9]+', generated_article))
                    st.caption(f"Generated article word count: {gen_word_count}")
                    st.caption(f"Based on {st.session_state.buffer_count} source article(s)")
                    
                    #st.download_button(
                    #    label="üì• Download Article",
                    #    data=generated_article,
                    #    file_name="generated_article.txt",
                    #    mime="text/plain"
                    #)
                
                except Exception as e:
                    st.error(f"An error occurred: {str(e)}")
    
    else:
        st.text_area(
            "Generated article will appear here...",
            height=400,
            disabled=True,
            key="placeholder"
        )

# Footer
st.markdown("---")
st.markdown("üí° **Workflow:** 1) Paste article ‚Üí 2) Click 'Cleanup Text' ‚Üí 3) Repeat for more articles ‚Üí 4) Click 'Generate New Article'")
st.markdown("üîÑ **Buffer System:** Articles are automatically concatenated with separators for combined processing")
st.markdown("„äôÔ∏è **LLM Usage:** 4o-mini for cleanup, Claude4Sonnet for translation, 4o for writing")
st.markdown("Version 1.0")